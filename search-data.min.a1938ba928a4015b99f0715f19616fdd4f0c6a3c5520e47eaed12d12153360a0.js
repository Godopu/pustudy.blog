'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/pustudy.blog/docs/pustudy/','title':"Godopu",'content':" Hello world!! "});index.add({'id':1,'href':'/pustudy.blog/docs/pustudy/cpp_programming_tutorial_vscode/','title':"Cpp Programming Tutorial Vscode",'content':" WSL (Windows Sub System for Linux) 설치  appwiz.cpl 실행   프로그램 및 기능에서 wRindows 기능 켜기/\n 끄기를 통해 Windows Sub System 설치\n 재부팅이 필요하니 부팅전에 저장할 파일들은 모두 저장해주세요~   windows store에서 ubuntu 설치  windows 키를 누른 후 store 검색   ubuntu app 설치   ubuntu app 실행 및 ID와 Password 설정   ubuntu update\n 다음 명령어를 통해 ubuntu를 업데이트 한다.\nsudo apt-get update sudo apt-get upgrade    컴파일러 및 빌드 툴 설치  ubuntu app에서 컴파일러를 설치한다.\n 컴파일러는 gcc/gpp, clang 등 다양한 컴파일러가 있으니 자신이 좋아하는 컴파일러를 설치한다.\n 여기에서는 clang 컴파일러를 설치함\nsudo apt-get install clang llvm   빌드의 편의를 위해 BUILD ESSENTIAL 및 Scons와 같은 툴들을 설치한다.\n 자신이 좋아하는 툴 및 라이브러리가 있다면 함께 설치하도록 한다.\nsudo apt-get install \\ build-essential git scons libtool autoconf \\ valgrind doxygen wget unzip chrpath    vscode 설치 및 설정  vscode는 마이크로소프트에서 제작한 code editor이자 개발도구로 아래의 사이트에서 자세한 사항을 확인할 수 있으며, 다운로드 받을 수도 있다.\n https://code.visualstudio.com/  vscode 설치가 완료되면 c/c++ 개발을 위한 설정을 수행한다.\n plugin 설치 - 다음 2개의 plugin을 설치한다.\n Remote-WSL\n c/c++\n   plugin 설치가 완료되면 vscode를 재실행 합니다.   프로젝트 생성  project를 생성할 폴더를 생성해준다.\n ubuntu app을 실행한 후 mkdir cpp-test 명령어를 통해 cpp-test 디렉터리를 생성한다.   remote-wsl 플러그인을 사용하여 ubuntu 환경에서 project를 생성해준다.\n   .gitignore 파일을 생성한 후 .vscode 폴더를 추가한다. (git을 사용하지 않을 사람은 하지 않아도 됨)   C++ 작업환경을 구성한다.\n Ctrl + Shift + P를 누른 후 C/C++: Edit 을 입력한 후 C/C++: Edit Configurations 항목을 선택   .vscode 디렉터리 내에 c_cpp_properties.json 파일이 생성되는 것을 확인한 후 자신이 원하는 환경으로 설정한다.   소스코드를 작성한다.\n src 폴더를 생성하고 그 안에 main.cpp 파일을 생성하여 다음 코드를 작성한다.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main(void) { cout \u0026lt;\u0026lt; \u0026#34;Hello world!!\u0026#34; \u0026lt;\u0026lt; endl; return 0; }    빌드\n 빌드를 위해 Tasks.json파일을 생성한다.\n 반드시 .cpp 파일을 선택한 후 아래의 절차를 실행할 것!!\n  ****\n 빌드를 수행한다.(Ctrl + Shift + B)\n Tasks.json 파일은 빌드 방식을 포함하고 있는 파일로 Tasks.json 파일에 여러가지 빌드 방식을 추가할 수 있으며, 다음의 절차로 추가한 빌드 방식 중 1가지를 사용해 빌드를 수행할 수 있다. (Run Build task 하는게 없음)\n   main 파일이 생성된 것을 확인한다.   디버그\n 빌드의 방식이 tasks.json 파일에 저장되듯이 디버깅 방식은 launch.json 파일에 저장된다. 다음 절차를 따라하여 launch.json파일을 생성한다.   Program 속성을 다음과 같이 수정한다.  \u0026quot;program\u0026quot; : \u0026quot;${fileDirname}/${fileBasenameNoExtension}\u0026quot;\n F5를 누르면 디버깅이 수행된다.\n BreakPoint를 찍어 제대로 작동하는지 확인한다.\n    소스 파일이 여러개면\u0026hellip; ref  https://github.com/Microsoft/vscode-cpptools/releases\n https://code.visualstudio.com/docs/cpp/config-wsl\n https://codeday.me/ko/qa/20190627/905798.html\n https://m.blog.naver.com/PostView.nhn?blogId=stupidus85\u0026amp;logNo=70133129470\u0026amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F\n https://pkgpl.org/2014/07/27/sconstruct_basic/\n https://clee.tistory.com/88\n https://wiki.iotivity.org/build_iotivity_with_ubuntu_build_machine\n http://egloos.zum.com/bruceKIM/v/3399880\n http://egloos.zum.com/bruceKIM/v/3399880\n https://hongku.tistory.com/70\n https://scons.org/doc/0.97/HTML/scons-user/x628.html\n  "});index.add({'id':2,'href':'/pustudy.blog/docs/pustudy/cpp/','title':"cpp",'content':" WSL (Windows Sub System for Linux) 설치  appwiz.cpl 실행   프로그램 및 기능에서 wRindows 기능 켜기/\n 끄기를 통해 Windows Sub System 설치\n 재부팅이 필요하니 부팅전에 저장할 파일들은 모두 저장해주세요~   windows store에서 ubuntu 설치  windows 키를 누른 후 store 검색   ubuntu app 설치   ubuntu app 실행 및 ID와 Password 설정   ubuntu update\n 다음 명령어를 통해 ubuntu를 업데이트 한다.\nsudo apt-get update sudo apt-get upgrade    컴파일러 및 빌드 툴 설치  ubuntu app에서 컴파일러를 설치한다.\n 컴파일러는 gcc/gpp, clang 등 다양한 컴파일러가 있으니 자신이 좋아하는 컴파일러를 설치한다.\n 여기에서는 clang 컴파일러를 설치함\nsudo apt-get install clang llvm   빌드의 편의를 위해 BUILD ESSENTIAL 및 Scons와 같은 툴들을 설치한다.\n 자신이 좋아하는 툴 및 라이브러리가 있다면 함께 설치하도록 한다.\nsudo apt-get install \\ build-essential git scons libtool autoconf \\ valgrind doxygen wget unzip chrpath    vscode 설치 및 설정  vscode는 마이크로소프트에서 제작한 code editor이자 개발도구로 아래의 사이트에서 자세한 사항을 확인할 수 있으며, 다운로드 받을 수도 있다.\n https://code.visualstudio.com/  vscode 설치가 완료되면 c/c++ 개발을 위한 설정을 수행한다.\n plugin 설치 - 다음 2개의 plugin을 설치한다.\n Remote-WSL\n c/c++\n   plugin 설치가 완료되면 vscode를 재실행 합니다.   프로젝트 생성  project를 생성할 폴더를 생성해준다.\n ubuntu app을 실행한 후 mkdir cpp-test 명령어를 통해 cpp-test 디렉터리를 생성한다.   remote-wsl 플러그인을 사용하여 ubuntu 환경에서 project를 생성해준다.\n   .gitignore 파일을 생성한 후 .vscode 폴더를 추가한다. (git을 사용하지 않을 사람은 하지 않아도 됨)   C++ 작업환경을 구성한다.\n Ctrl + Shift + P를 누른 후 C/C++: Edit 을 입력한 후 C/C++: Edit Configurations 항목을 선택   .vscode 디렉터리 내에 c_cpp_properties.json 파일이 생성되는 것을 확인한 후 자신이 원하는 환경으로 설정한다.   소스코드를 작성한다.\n src 폴더를 생성하고 그 안에 main.cpp 파일을 생성하여 다음 코드를 작성한다.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main(void) { cout \u0026lt;\u0026lt; \u0026#34;Hello world!!\u0026#34; \u0026lt;\u0026lt; endl; return 0; }    빌드\n 빌드를 위해 Tasks.json파일을 생성한다.\n 반드시 .cpp 파일을 선택한 후 아래의 절차를 실행할 것!!\n  ****\n 빌드를 수행한다.(Ctrl + Shift + B)\n Tasks.json 파일은 빌드 방식을 포함하고 있는 파일로 Tasks.json 파일에 여러가지 빌드 방식을 추가할 수 있으며, 다음의 절차로 추가한 빌드 방식 중 1가지를 사용해 빌드를 수행할 수 있다. (Run Build task 하는게 없음)\n   main 파일이 생성된 것을 확인한다.   디버그\n 빌드의 방식이 tasks.json 파일에 저장되듯이 디버깅 방식은 launch.json 파일에 저장된다. 다음 절차를 따라하여 launch.json파일을 생성한다.   Program 속성을 다음과 같이 수정한다.  \u0026quot;program\u0026quot; : \u0026quot;${fileDirname}/${fileBasenameNoExtension}\u0026quot;\n F5를 누르면 디버깅이 수행된다.\n BreakPoint를 찍어 제대로 작동하는지 확인한다.\n    소스 파일이 여러개면\u0026hellip; ref  https://github.com/Microsoft/vscode-cpptools/releases\n https://code.visualstudio.com/docs/cpp/config-wsl\n https://codeday.me/ko/qa/20190627/905798.html\n https://m.blog.naver.com/PostView.nhn?blogId=stupidus85\u0026amp;logNo=70133129470\u0026amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F\n https://pkgpl.org/2014/07/27/sconstruct_basic/\n https://clee.tistory.com/88\n https://wiki.iotivity.org/build_iotivity_with_ubuntu_build_machine\n http://egloos.zum.com/bruceKIM/v/3399880\n http://egloos.zum.com/bruceKIM/v/3399880\n https://hongku.tistory.com/70\n https://scons.org/doc/0.97/HTML/scons-user/x628.html\n  "});index.add({'id':3,'href':'/pustudy.blog/docs/','title':"Docs",'content':""});index.add({'id':4,'href':'/pustudy.blog/','title':"Introduction",'content':" Acerbo datus maxime Astris ipse furtiva Est in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut olivae sensit arma sorori deducit, inesset crudus, ego vetuere aliis, modo arsit? Utinam rapta fiducia valuere litora adicit cursu, ad facies  Suis quot vota Ea furtique risere fratres edidit terrae magis. Colla tam mihi tenebat: miseram excita suadent es pecudes iam. Concilio quam velatus posset ait quod nunc! Fragosis suae dextra geruntur functus vulgata.   Tempora nisi nunc Lorem markdownum emicat gestu. Cannis sol pressit ducta. Est Idaei, tremens ausim se tutaeque, illi ulnis hausit, sed, lumina cutem. Quae avis sequens!\nvar panel = ram_design; if (backup + system) { file.readPoint = network_native; sidebar_engine_device(cell_tftp_raster, dual_login_paper.adf_vci.application_reader_design( graphicsNvramCdma, lpi_footer_snmp, integer_model)); } public_keyboard_docking += error.controller_gibibyte_plug.ip(4, asciiPetaflops, software(supercomputer_compatible_status + 4)); dynamic_disk.indexModeLaptop = bufferTftpReality; var export_vlog_sequence = trinitron_flowchart + supercomputer_cluster_rj( -1, toolbar_powerpoint_query, -2 / multiprocessing_impression);  Locis suis novi cum suoque decidit eadem Idmoniae ripis, at aves, ali missa adest, ut et autem, et ab? Venit spes versus finis sermonibus patefecit murum nec est sine oculis. Ille inmota macies domoque caelestia cadit tantummodo scelus procul, corde!\n Dolentem capi parte rostro alvum habentem pudor Fulgentia sanguine paret E punior consurgit lentus Vox hasta eras micantes  Facibus pharetrae indetonsusque indulsit sic incurrite foliis Nefandam et prisci palmas! Blandita cutis flectitur montis macies, te nati Latiis; turbaque inferias. Virginis tibi peracta avidusque facies caper nec, e at ademptae, mira.\ndirect *= font(inputScareware(sliHome), crossplatform.byte( ppl_encryption.excel_e_rte(integratedModelModifier), timeVirtual, floating_speakers.media_printer(us, yahoo, primaryPhp))); friendly_metal_flatbed(cd, isoPrimaryStorage(reader), dmaMirrored); if (parse_flash_cron.metalGif(1, adServiceDevice, utility)) { adf -= operation_cdma_samba; imapGif.switch += torrent; } else { pmu.disk_captcha = digital_ppp_pci + recursionTransistor(5, dram); ajax_service += grayscalePythonLock; google_scroll_capacity = ftp + engine_dslam_sidebar / tape - 1; } drive_rw = zipTftp; var suffix = software_router_extension.dimm_ddr(-5, kernel_digital_minisite);  Vocavit toto; alas mitis maestus in liquidarum ab legi finitimosque dominam tibi subitus; Orionis vertitur nota. Currere alti etiam seroque cernitis innumeris miraturus amplectique collo sustinet quemque! Litora ante turba?\n"});})();